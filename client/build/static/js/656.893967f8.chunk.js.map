{"version":3,"file":"static/js/656.893967f8.chunk.js","mappings":"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","sources":["routes/routeComponents/Feed/FeedChat.tsx"],"sourcesContent":["import allActions from '../../../redux/actions/userAction';\r\nimport React, {ChangeEvent, useEffect, useRef, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {SocketIO} from '../../../components/socket/socketIO'\r\nimport {ReduxStoreType} from \"../../../redux/types/reduxStoreTypes\";\r\nimport {StringParam, useQueryParam} from \"use-query-params\";\r\nimport {useMediaQuery} from \"react-responsive\";\r\nimport {toast} from \"react-toastify\";\r\n\r\nconst socket = SocketIO.instance.socket;\r\n\r\nexport default function FeedChat() {\r\n\r\n    const dispatch = useDispatch();\r\n    const feedStore = useSelector((state: ReduxStoreType) => state.feedState.feedElements.chats);\r\n    const uId = useSelector((state: ReduxStoreType) => state.userState.uId);\r\n\r\n    const isDesktopOrMobile = useMediaQuery({\r\n        query: '(min-width: 500px)'\r\n    });\r\n\r\n    const [selectedId, setSelectedId] = useQueryParam('chat', StringParam);\r\n    const [typedMessage, setTypedMessage] = useState<string>('');\r\n    const [scrolled, setScrolled] = useState<boolean>(false);\r\n    const [uploadedFile, setUploadedFile] = useState<string>('');\r\n\r\n\r\n    const chatParent = useRef<HTMLDivElement>(null)\r\n    const currentChat = [selectedId, uId].sort().join(``);\r\n    const chat = feedStore[currentChat];\r\n\r\n    const values = feedStore[currentChat] ? feedStore[currentChat].messages : null;\r\n    const profiles = chat ? Object.keys(chat.chatProfiles).map(key => chat.chatProfiles[key]) : null;\r\n\r\n    useEffect(() => {\r\n        if (!uId) return;\r\n        if (!chat) {\r\n            socket.emit(\"LOAD_NEW_CHAT\", {uId, pageId: selectedId});\r\n        }\r\n\r\n        socket.on('LOAD_NEW_CHAT_ANSWER', function (data) {\r\n            console.log(data)\r\n            dispatch(allActions.loadNewChat(data));\r\n            console.log(feedStore);\r\n        });\r\n        socket.on('UPLOAD_PHOTO_ANSWER', function (file) {\r\n            setUploadedFile(file);\r\n        });\r\n\r\n        return (() => {\r\n            socket.off(\"LOAD_NEW_CHAT_ANSWER\");\r\n            socket.off('UPLOAD_PHOTO_ANSWER');\r\n        });\r\n    }, [selectedId]);\r\n\r\n    useEffect(() => {\r\n        if (!values || !uId || values.length === 0) return;\r\n        socket.emit('READ_CHAT_MESSAGES', {chatId: currentChat, to: values[0].messageId, host: uId});\r\n        dispatch(allActions.markAsRead(currentChat, selectedId!));\r\n    }, [values?.length]);\r\n\r\n    useEffect(() => {\r\n        if (!feedStore || Object.entries(feedStore).length === 0 || scrolled) return;\r\n        const domNode = chatParent.current;\r\n        if (domNode) domNode.scrollIntoView();\r\n        setScrolled(true);\r\n    }, [feedStore, scrolled]);\r\n\r\n\r\n    if (!chat || !uId) return (<div>Loading...</div>);\r\n\r\n\r\n    function uploadFile(event: ChangeEvent<HTMLInputElement>) {\r\n        const file = event.target.files![0];\r\n        file.size < 2097152 * 2 ? socket.emit('UPLOAD_PHOTO', file, file.name) : toast.error('Файл слишком большой!');\r\n    }\r\n\r\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        const getMessage = feedStore[currentChat].messages.slice(-1)[0];\r\n        const newMessageProfiles = feedStore[currentChat].chatProfiles;\r\n        const newMessageId = getMessage ? getMessage.messageId + 1 : 1;\r\n\r\n        const message = {\r\n            body: typedMessage ? typedMessage : ' ',\r\n            from: uId,\r\n            messageId: newMessageId,\r\n            currentChat,\r\n            contentType: uploadedFile ? 'picture' : 'text',\r\n            date: new Date(Date.now()).toISOString(),\r\n            chatUsers: profiles!.map(profile => profile.uId).sort(),\r\n            picture: uploadedFile ? uploadedFile : undefined,\r\n            unRead: true\r\n        };\r\n\r\n        dispatch(allActions.newMessage(currentChat, message, newMessageProfiles));\r\n        socket.emit('SEND_MESSAGE', {senderId: uId, chatId: currentChat, message, chatProfiles: newMessageProfiles});\r\n        setScrolled(false);\r\n        setTypedMessage('');\r\n        setUploadedFile('');\r\n    }\r\n\r\n    const headerUser = profiles?.find(profile => profile.uId === selectedId);\r\n    let elements = values?.map((chat, index, array) => {\r\n        if (!chat) return;\r\n        const prevMessage = index > 0 ? array[index - 1] : null;\r\n        const nextMessage = index < array.length - 1 ? array[index + 1] : null;\r\n        const {messageId, body, from, chatId, contentType, unRead, picture} = chat;\r\n        const messageHeader = profiles?.find(profile => profile.uId === from);\r\n        const prevSameOrigin = from === prevMessage?.from;\r\n        const nextSameOrigin = from === nextMessage?.from;\r\n        let classes = 'ChatMessage';\r\n        if (prevSameOrigin) classes = classes + ' NextMessage';\r\n        if (nextSameOrigin) classes = classes + ' NextMessageSame';\r\n        if (!nextSameOrigin) classes = classes + ' NextMessageNew';\r\n        if (unRead) classes = classes + ' Unread';\r\n        return (\r\n            <div className={classes}>\r\n                {prevSameOrigin ||\r\n                    <div>\r\n                        <img className=\"ChatHeaderImage\" src={messageHeader.profilePhoto} alt={\"missing\"}/>\r\n                    </div>\r\n                }\r\n                <div key={messageId}\r\n                     className={prevSameOrigin ? \"ChatHeaderContainer NextMessage\" : \"ChatHeaderContainer\"}>\r\n                    {prevSameOrigin || <span className=\"ChatHeaderTitle\">{messageHeader.firstName}</span>}\r\n                    <span className=\"ChatUserText\">{body}</span>\r\n                    {picture ? <img className={'CurrenChatPicture'} src={picture}/> : null}\r\n                </div>\r\n            </div>\r\n        )\r\n    });\r\n    if (!headerUser) return (\r\n        <div>Пользователя не существует</div>\r\n    );\r\n    return (\r\n        <div className={isDesktopOrMobile ? 'CurrentChat' : 'CurrentChat Mobile'}>\r\n            <div className='CurrentChatHeader'>\r\n                <span className=\"ChatHeaderTitle\">{headerUser.firstName + \" \" + headerUser.lastName}</span>\r\n                <img className=\"ChatHeaderImage\" src={headerUser.profilePhoto} alt={\"missing\"}/>\r\n            </div>\r\n            <div className=\"\">\r\n                <div className='ChatMessagesContainer'>\r\n                    {elements}\r\n                    <div ref={chatParent}/>\r\n                </div>\r\n            </div>\r\n            <form className={'CurrentChatForm'} onSubmit={handleSubmit}>\r\n                <textarea placeholder='Отправить сообщение' value={typedMessage} style={{resize: \"none\"}}\r\n                          onChange={event => setTypedMessage(event.target.value)}/>\r\n                <input type='file' onChange={uploadFile} accept={'image/png, image/jpeg'} id={'ChatImageLoad'}/>\r\n                <input type={'button'} onClick={() => document.querySelector<HTMLElement>('#ChatImageLoad')!.click()}/>\r\n                <div>\r\n                    {uploadedFile ? <img className='ChatImagePreview' src={uploadedFile}/> : null}\r\n                </div>\r\n                <button type=\"submit\"></button>\r\n            </form>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n//последний элемент ref={chatParent} гдеь элементс"],"names":["socket","SocketIO","FeedChat","dispatch","useDispatch","feedStore","useSelector","state","feedState","feedElements","chats","uId","userState","isDesktopOrMobile","useMediaQuery","query","useQueryParam","StringParam","selectedId","useState","typedMessage","setTypedMessage","scrolled","setScrolled","uploadedFile","setUploadedFile","chatParent","useRef","currentChat","sort","join","chat","values","messages","profiles","Object","keys","chatProfiles","map","key","useEffect","emit","pageId","on","data","console","log","allActions","file","off","length","chatId","to","messageId","host","entries","domNode","current","scrollIntoView","headerUser","find","profile","elements","index","array","prevMessage","nextMessage","body","from","unRead","contentType","picture","messageHeader","prevSameOrigin","nextSameOrigin","classes","className","src","profilePhoto","alt","firstName","lastName","ref","onSubmit","event","preventDefault","getMessage","slice","newMessageProfiles","newMessageId","message","date","Date","now","toISOString","chatUsers","undefined","senderId","placeholder","value","style","resize","onChange","target","type","files","size","name","toast","accept","id","onClick","document","querySelector","click"],"sourceRoot":""}