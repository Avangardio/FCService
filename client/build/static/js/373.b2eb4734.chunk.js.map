{"version":3,"file":"static/js/373.b2eb4734.chunk.js","mappings":"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","sources":["components/utities/ContentTypeCheck.tsx","routes/routeComponents/Feed/FeedOverall.tsx","components/utities/CheckChatFilter.ts"],"sourcesContent":["export default function contentTypeCheck(contentType: string) {\r\n    if (contentType === 'text') return null;\r\n    return (contentType.toLocaleUpperCase())\r\n};","import React, {useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {SocketIO} from '../../../components/socket/socketIO'\r\nimport {ReduxStoreType} from \"../../../redux/types/reduxStoreTypes\";\r\nimport {StringParam, useQueryParam} from \"use-query-params\";\r\nimport {useMediaQuery} from \"react-responsive\";\r\n\r\nimport contentTypeCheck from \"../../../components/utities/ContentTypeCheck\";\r\nimport CheckChatFilter from \"../../../components/utities/CheckChatFilter\";\r\nimport FindUsersChat from \"../../Components/FindUsersChat\";\r\n\r\nconst socket = SocketIO.instance.socket;\r\n\r\nexport default function FeedOverall() {\r\n\r\n    const dispatch = useDispatch();\r\n    const uId = useSelector((state: ReduxStoreType) => state.userState.uId);\r\n    const feedStore = useSelector((state: ReduxStoreType) => state.feedState.feedElements.chats);\r\n    const activeFilter = useSelector((state: ReduxStoreType) => state.feedState.filter);\r\n    useEffect(() => {\r\n        if (!uId) return;\r\n        socket.on(\"FIND_USERS_INPUT_ANSWER\", function (data) {\r\n            console.log(data);\r\n        });\r\n        return (() => {\r\n            socket.off('FIND_USERS_INPUT_ANSWER');\r\n        })\r\n    }, [uId])\r\n\r\n    const isDesktopOrMobile = useMediaQuery({\r\n        query: '(min-width: 500px)'\r\n    });\r\n    const [currentChat, setCurrentChat] = useQueryParam('chat', StringParam);\r\n    const [findId, setFindId] = useState<string>('');\r\n\r\n    function handleSubmit(event: React.FormEvent<HTMLFormElement>) {\r\n        event.preventDefault();\r\n        socket.emit('FIND_USERS_INPUT', findId);\r\n        // setCurrentChat(`id${findId}`)\r\n    }\r\n\r\n\r\n    function handleClick(event: React.MouseEvent<HTMLElement>) {\r\n        event.preventDefault();\r\n        const target = event.target as HTMLElement;\r\n        const targetId = target.closest('div.ChatHeaderContainer')!.getAttribute(\"data-id\");\r\n        if (targetId !== null) setCurrentChat(targetId);\r\n        setCurrentChat(targetId);\r\n    }\r\n//.filter(chat => CheckChatFilter(chat))\r\n    let values = Object.keys(feedStore).map(key => feedStore[key]).filter(chat => CheckChatFilter(chat, activeFilter, uId)).sort((chat1, chat2) => {\r\n        let result;\r\n        chat1.messages?.slice(-1)[0].date! < chat2?.messages.slice(-1)[0].date! ? result = 1 : result = -1;\r\n        return result;\r\n    });\r\n    let elements = values.map((chat, index) => {\r\n        if (chat.messages.length === 0) return;\r\n        const {messageId, body, from, chatId, contentType, unRead} = chat.messages.slice(-1)[0];\r\n        const [profile1, profile2] = Object.keys(chat.chatProfiles).map(key => chat.chatProfiles[key]);\r\n        let headerUser;\r\n        if (!profile2) headerUser = profile1\r\n        else headerUser = uId !== profile1.uId ? profile1 : profile2;\r\n        let messageText;\r\n        contentTypeCheck(contentType!) ? messageText = contentTypeCheck(contentType!) : messageText = body!;\r\n\r\n        return (\r\n            <div data-id={headerUser.uId} key={headerUser.uId}\r\n                 className={unRead === true && from !== uId ? \"ChatHeaderContainer Unread\" : \"ChatHeaderContainer\"}\r\n                 onClick={(event) => {\r\n                     handleClick(event)\r\n                 }}>\r\n                <span className=\"ChatHeaderTitle\">{headerUser.firstName + \" \" + headerUser.lastName}</span>\r\n                <img className=\"ChatHeaderImage\" src={headerUser.profilePhoto} alt={\"missing\"}/>\r\n                <div className={unRead === true && from === uId ? \"ChatMessageField Unread\" : \"ChatMessageField\"}>\r\n                    <img className=\"ChatUserImage\" src={chat.chatProfiles[from!].profilePhoto}/>\r\n                    <div>{chat.chatProfiles[from!].firstName + \":\"}</div>\r\n                    <div className=\"ChatUserText\">{messageText}</div>\r\n                </div>\r\n            </div>\r\n        )\r\n    });\r\n\r\n    return (\r\n        <div className={isDesktopOrMobile ? \"ChatOverall\" : 'ChatOverall Mobile'}>\r\n            <FindUsersChat source={'chat'}/>\r\n            <div>\r\n                {elements}\r\n            </div>\r\n        </div>\r\n    )\r\n\r\n};","import {ChatMessagesType, ChatProfilesType} from \"../../redux/types/reduxStoreTypes\";\r\n\r\nexport default function CheckChatFilter(chat: { chatProfiles: ChatProfilesType; messages: ChatMessagesType[] }, activeFilter: string, uId: string) {\r\n    const {messages} = chat;\r\n    if (messages.length === 0) return false;\r\n    if (activeFilter === 'none') return true;\r\n    if (messages.slice(-1)[0].unRead! === true && messages.slice(-1)[0].from !== uId) return true;\r\n    return false;\r\n}"],"names":["contentTypeCheck","contentType","toLocaleUpperCase","socket","SocketIO","FeedOverall","useDispatch","uId","useSelector","state","userState","feedStore","feedState","feedElements","chats","activeFilter","filter","useEffect","on","data","console","log","off","isDesktopOrMobile","useMediaQuery","query","useQueryParam","StringParam","setCurrentChat","useState","values","Object","keys","map","key","chat","messages","length","slice","unRead","from","CheckChatFilter","sort","chat1","chat2","date","elements","index","headerUser","messageText","body","messageId","chatId","chatProfiles","profile1","profile2","className","onClick","event","preventDefault","targetId","target","closest","getAttribute","handleClick","firstName","lastName","src","profilePhoto","alt","FindUsersChat","source"],"sourceRoot":""}