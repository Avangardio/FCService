{"version":3,"file":"static/js/398.ab3a881e.chunk.js","mappings":"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","sources":["components/axiosConfigs/pageSetupConfiguration.ts","routes/routeComponents/Account/Registration.tsx","routes/RegistrationPage.tsx","routes/routeComponents/Account/RegistrationFinish.tsx","routes/routeComponents/Page/PageSetup.tsx"],"sourcesContent":["export const pageSetupConfiguration = <AxiosPageDataTypes>(uId: AxiosPageDataTypes, data: AxiosPageDataTypes) => ({\r\n    method: \"post\",\r\n    url: \"https://avangardio-1.ru/page/pageSetup\",\r\n    withCredentials: true,\r\n    data: {\r\n        uId: uId,\r\n        pageData: data\r\n    }\r\n});\r\n","import React, {useState} from 'react';\r\nimport axios from \"axios\";\r\nimport RegistrationFinish from \"./RegistrationFinish\";\r\n\r\nexport default function Registration() {\r\n\r\n    const [email, setEmail] = useState<string>(\"\");\r\n    const [password, setPassword] = useState<string>(\"\");\r\n    const [regResponse, setRegResponse] = useState<string>();\r\n    const [nextStep, setNextStep] = useState<boolean>(false);\r\n    const [newId, setNewId] = useState<string>('');\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        const configuration = {\r\n            method: \"post\",\r\n            url: \"https://avangardio-1.ru/account/register\",\r\n            data: {\r\n                email,\r\n                password,\r\n            },\r\n        };\r\n        axios(configuration)\r\n            .then((result) => {\r\n                setRegResponse(result.data.message);\r\n                if (!result.data.userData.registrationCompleted) {\r\n                    setNewId(result.data.userData.uId);\r\n                    setNextStep(true);\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                setRegResponse(error.response.data.message)\r\n            });\r\n    };\r\n\r\n    if (nextStep) return (<RegistrationFinish userId={newId}/>);\r\n\r\n\r\n    return (\r\n        <div>\r\n            <form className={'RegistrationForm'} onSubmit={(e) => handleSubmit(e)}>\r\n                <input value={email} onChange={(e) => setEmail(e.target.value)} required={true} name=\"email\"\r\n                       placeholder={`Введите почту...`}/>\r\n                <input value={password} onChange={(e) => setPassword(e.target.value)} required={true} name='password'\r\n                       placeholder={`Введите пароль...`}/>\r\n                <button type={\"submit\"}>Регистрация</button>\r\n            </form>\r\n            {regResponse}\r\n        </div>\r\n    )\r\n\r\n};","import React from \"react\";\r\nimport Registration from './routeComponents/Account/Registration';\r\n\r\n\r\nexport default function RegistrationPage() {\r\n    return (\r\n        <Registration/>\r\n    )\r\n}","import React, {ReactElement} from 'react';\r\nimport PageSetup from \"../Page/PageSetup\";\r\n\r\nexport interface finishProps {\r\n    userId?: string\r\n}\r\n\r\nexport default function RegistrationFinish({userId}: finishProps): ReactElement {\r\n    return (<PageSetup userId={userId}></PageSetup>)\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport {ReduxStoreType} from \"../../../redux/types/reduxStoreTypes\";\r\nimport {toast} from \"react-toastify\";\r\nimport {SocketIO} from \"../../../components/socket/socketIO\";\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n\r\nimport {Crop} from 'react-image-crop'\r\n\r\nconst socket = SocketIO.instance.socket;\r\n\r\nconst {pageSetupConfiguration} = require('../../../components/axiosConfigs/pageSetupConfiguration');\r\nconst {getPageConfiguration} = require('../../../components/axiosConfigs/getPageConfiguration');\r\n\r\n\r\nexport interface finishProps {\r\n    userId?: string\r\n}\r\n\r\nexport default function PageSetup({userId}: finishProps) {\r\n    //todo сделать верификацию изменения страницы чтоб мидлвэйром чекала айди пользователя и изменения!!!! отправляем uId свой чекаем с session userId и тогда пропускаем.\r\n    const uId = useSelector((state: ReduxStoreType) => state.userState.uId);\r\n\r\n    const [pageLoaded, setPageLoaded] = useState<boolean>(false);\r\n\r\n    const [pageExist, setPageExist] = useState<boolean>();\r\n\r\n    const [newPhoto, setNewPhoto] = useState<boolean>(false);\r\n\r\n    const [uploadedFile, setUploadedFile] = useState<string>('');\r\n    const [uploadedFileScale, setUploadedFileScale] = useState<{ width: number, height: number }>({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const [uploadedAvatar, setUploadedAvatar] = useState();\r\n    const [uploadedMiniAvatar, setUploadedMiniAvatar] = useState();\r\n\r\n    const [firstName, setFirstName] = useState<string>('');\r\n    const [lastName, setLastName] = useState<string>('');\r\n    const [city, setCity] = useState<string>('');\r\n    const [aboutMe, setAboutMe] = useState<string>('');\r\n    const [birthDay, setBirthDay] = useState<string>('');\r\n\r\n    const [response, setResponse] = useState<string>('');\r\n    const [crop, setCrop] = useState<Crop>({\r\n        unit: '%', // Can be 'px' or '%'\r\n        x: 25,\r\n        y: 25,\r\n        width: 50,\r\n        height: 50,\r\n    })\r\n\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        axios(pageSetupConfiguration(uId || userId, {\r\n            firstName,\r\n            lastName,\r\n            profilePhoto: uploadedFile,\r\n            uploadedAvatar,\r\n            uploadedMiniAvatar,\r\n            city,\r\n            aboutMe,\r\n            birthDay\r\n        }))\r\n            .then(result => {\r\n                setResponse(result.data.message === \"Page Update Success!\" ? \"Страница обновлена успешно\" : result.data.message)\r\n            })\r\n            .catch(error => {\r\n                if (error) console.log(error);\r\n            })\r\n\r\n    };\r\n\r\n    //  const {firstName, lastName, profilePhoto, city, aboutMe}\\\r\n    function uploadFile(event: ChangeEvent<HTMLInputElement>) {\r\n        const file = event.target.files![0];\r\n        if (file.size > 2097152 * 3) {\r\n            toast.error('Файл слишком большой!');\r\n            return;\r\n        }\r\n        socket.emit('UPLOAD_PHOTO', file, file.name);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!uId && !userId) return;\r\n        axios(getPageConfiguration(uId || userId))\r\n            .then(result => {\r\n                setPageLoaded(true);\r\n\r\n                setPageExist(true);\r\n                const page = result.data.page;\r\n                setFirstName(page ? page.firstName : '');\r\n                setLastName(page ? page.lastName : '');\r\n                setNewPhoto(false);\r\n                setUploadedFile(page ? page.profilePhoto : '');\r\n                setCity(page ? page.city : '');\r\n                setAboutMe(page ? page.aboutMe : '');\r\n                setBirthDay(page ? page.birthDay : '');\r\n\r\n            })\r\n            .catch(error => {\r\n                setPageLoaded(true)\r\n                if (error.response.status === 404) setPageExist(false);\r\n            })\r\n        socket.on('UPLOAD_PHOTO_ANSWER', function (file) {\r\n            const image = new Image();\r\n            image.src = file;\r\n            image.onload = () => {\r\n                setNewPhoto(true);\r\n                setUploadedFileScale({height: image.height, width: image.width});\r\n                setUploadedFile(file);\r\n            }\r\n\r\n        });\r\n        return (() => {\r\n            socket.off('UPLOAD_PHOTO_ANSWER');\r\n        });\r\n    }, [uId])\r\n\r\n    let pageSetupElements;\r\n\r\n    if (pageLoaded) {\r\n        pageSetupElements =\r\n            <div className='PageSetup'>\r\n\r\n                {pageExist ? <h1>Редактирование страницы</h1> : <h1>Создание страницы</h1>}\r\n                <div className='PageSetupForm'>\r\n\r\n                    <form onSubmit={(e) => handleSubmit(e)}>\r\n                        <div>\r\n                            <label htmlFor=\"firstName\"><b>Имя:</b></label>\r\n                            <input name='firstName' required={true} value={firstName}\r\n                                   onChange={(event) => setFirstName(event.target.value)} placeholder={'Ваше имя.'}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"lastName\"><b>Фамилия</b></label>\r\n                            <input name='lastName' required={true} value={lastName}\r\n                                   onChange={(event) => setLastName(event.target.value)} placeholder={'Ваша фамилия.'}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"age\"><b>Дата рождения:</b></label>\r\n                            <input name='age' value={birthDay} onChange={(event) => setBirthDay(event.target.value)}\r\n                                   type={\"date\"}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"city\"><b>Город:</b></label>\r\n                            <input name='city' value={city} onChange={(event) => setCity(event.target.value)}\r\n                                   placeholder={'Ваш город.'}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"aboutMe\"><b>О себе:</b></label>\r\n                            <textarea name='aboutMe' value={aboutMe}\r\n                                      onChange={(event) => setAboutMe(event.target.value)}\r\n                                      placeholder={'Расскажите о себе.'}/>\r\n                        </div>\r\n                        <div className=\"PageSetupAvatar\">\r\n                            <input type={'button'}\r\n                                   onClick={() => document.querySelector<HTMLElement>('#ChatImageLoad')!.click()}/>\r\n                            {uploadedFile ? <img className='UserPageImage' src={uploadedFile}/> : null}\r\n                            <input type='file' onChange={uploadFile} accept={'image/png, image/jpeg'}\r\n                                   id={'ChatImageLoad'}/>\r\n                        </div>\r\n                        <button type=\"submit\"><b>Внести изменения</b></button>\r\n                    </form>\r\n                </div>\r\n                <p>{response}</p>\r\n            </div>\r\n    }\r\n    return (\r\n        <div>{pageSetupElements}</div>\r\n    )\r\n}"],"names":["pageSetupConfiguration","uId","data","method","url","withCredentials","pageData","Registration","useState","email","setEmail","password","setPassword","regResponse","setRegResponse","nextStep","setNextStep","newId","setNewId","RegistrationFinish","userId","className","onSubmit","e","preventDefault","configuration","axios","then","result","message","userData","registrationCompleted","catch","error","response","handleSubmit","value","onChange","target","required","name","placeholder","type","RegistrationPage","socket","SocketIO","require","getPageConfiguration","PageSetup","pageSetupElements","useSelector","state","userState","pageLoaded","setPageLoaded","pageExist","setPageExist","setNewPhoto","uploadedFile","setUploadedFile","width","height","setUploadedFileScale","uploadedAvatar","uploadedMiniAvatar","firstName","setFirstName","lastName","setLastName","city","setCity","aboutMe","setAboutMe","birthDay","setBirthDay","setResponse","unit","x","y","useEffect","page","profilePhoto","status","on","file","image","Image","src","onload","off","console","log","htmlFor","event","onClick","document","querySelector","click","files","size","toast","emit","accept","id"],"sourceRoot":""}