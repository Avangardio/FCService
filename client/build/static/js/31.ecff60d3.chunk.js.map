{"version":3,"file":"static/js/31.ecff60d3.chunk.js","mappings":"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","sources":["../node_modules/universal-cookie/es6/utils.js","../node_modules/universal-cookie/es6/Cookies.js","../node_modules/universal-cookie/es6/index.js","routes/ProtectedRoute.tsx","../node_modules/universal-cookie/node_modules/cookie/index.js"],"sourcesContent":["import * as cookie from 'cookie';\r\nexport function hasDocumentCookie() {\r\n    // Can we get/set cookies on document.cookie?\r\n    return typeof document === 'object' && typeof document.cookie === 'string';\r\n}\r\nexport function cleanCookies() {\r\n    document.cookie.split(';').forEach(function (c) {\r\n        document.cookie = c\r\n            .replace(/^ +/, '')\r\n            .replace(/=.*/, '=;expires=' + new Date().toUTCString() + ';path=/');\r\n    });\r\n}\r\nexport function parseCookies(cookies, options) {\r\n    if (typeof cookies === 'string') {\r\n        return cookie.parse(cookies, options);\r\n    }\r\n    else if (typeof cookies === 'object' && cookies !== null) {\r\n        return cookies;\r\n    }\r\n    else {\r\n        return {};\r\n    }\r\n}\r\nexport function isParsingCookie(value, doNotParse) {\r\n    if (typeof doNotParse === 'undefined') {\r\n        // We guess if the cookie start with { or [, it has been serialized\r\n        doNotParse =\r\n            !value || (value[0] !== '{' && value[0] !== '[' && value[0] !== '\"');\r\n    }\r\n    return !doNotParse;\r\n}\r\nexport function readCookie(value, options) {\r\n    if (options === void 0) { options = {}; }\r\n    var cleanValue = cleanupCookieValue(value);\r\n    if (isParsingCookie(cleanValue, options.doNotParse)) {\r\n        try {\r\n            return JSON.parse(cleanValue);\r\n        }\r\n        catch (e) {\r\n            // At least we tried\r\n        }\r\n    }\r\n    // Ignore clean value if we failed the deserialization\r\n    // It is not relevant anymore to trim those values\r\n    return value;\r\n}\r\nfunction cleanupCookieValue(value) {\r\n    // express prepend j: before serializing a cookie\r\n    if (value && value[0] === 'j' && value[1] === ':') {\r\n        return value.substr(2);\r\n    }\r\n    return value;\r\n}\r\n","var __assign = (this && this.__assign) || function () {\r\n    __assign = Object.assign || function(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\r\n                t[p] = s[p];\r\n        }\r\n        return t;\r\n    };\r\n    return __assign.apply(this, arguments);\r\n};\r\nimport * as cookie from 'cookie';\r\nimport { hasDocumentCookie, parseCookies, readCookie } from './utils';\r\nvar Cookies = /** @class */ (function () {\r\n    function Cookies(cookies, options) {\r\n        var _this = this;\r\n        this.changeListeners = [];\r\n        this.HAS_DOCUMENT_COOKIE = false;\r\n        this.cookies = parseCookies(cookies, options);\r\n        new Promise(function () {\r\n            _this.HAS_DOCUMENT_COOKIE = hasDocumentCookie();\r\n        }).catch(function () { });\r\n    }\r\n    Cookies.prototype._updateBrowserValues = function (parseOptions) {\r\n        if (!this.HAS_DOCUMENT_COOKIE) {\r\n            return;\r\n        }\r\n        this.cookies = cookie.parse(document.cookie, parseOptions);\r\n    };\r\n    Cookies.prototype._emitChange = function (params) {\r\n        for (var i = 0; i < this.changeListeners.length; ++i) {\r\n            this.changeListeners[i](params);\r\n        }\r\n    };\r\n    Cookies.prototype.get = function (name, options, parseOptions) {\r\n        if (options === void 0) { options = {}; }\r\n        this._updateBrowserValues(parseOptions);\r\n        return readCookie(this.cookies[name], options);\r\n    };\r\n    Cookies.prototype.getAll = function (options, parseOptions) {\r\n        if (options === void 0) { options = {}; }\r\n        this._updateBrowserValues(parseOptions);\r\n        var result = {};\r\n        for (var name_1 in this.cookies) {\r\n            result[name_1] = readCookie(this.cookies[name_1], options);\r\n        }\r\n        return result;\r\n    };\r\n    Cookies.prototype.set = function (name, value, options) {\r\n        var _a;\r\n        if (typeof value === 'object') {\r\n            value = JSON.stringify(value);\r\n        }\r\n        this.cookies = __assign(__assign({}, this.cookies), (_a = {}, _a[name] = value, _a));\r\n        if (this.HAS_DOCUMENT_COOKIE) {\r\n            document.cookie = cookie.serialize(name, value, options);\r\n        }\r\n        this._emitChange({ name: name, value: value, options: options });\r\n    };\r\n    Cookies.prototype.remove = function (name, options) {\r\n        var finalOptions = (options = __assign(__assign({}, options), { expires: new Date(1970, 1, 1, 0, 0, 1), maxAge: 0 }));\r\n        this.cookies = __assign({}, this.cookies);\r\n        delete this.cookies[name];\r\n        if (this.HAS_DOCUMENT_COOKIE) {\r\n            document.cookie = cookie.serialize(name, '', finalOptions);\r\n        }\r\n        this._emitChange({ name: name, value: undefined, options: options });\r\n    };\r\n    Cookies.prototype.addChangeListener = function (callback) {\r\n        this.changeListeners.push(callback);\r\n    };\r\n    Cookies.prototype.removeChangeListener = function (callback) {\r\n        var idx = this.changeListeners.indexOf(callback);\r\n        if (idx >= 0) {\r\n            this.changeListeners.splice(idx, 1);\r\n        }\r\n    };\r\n    return Cookies;\r\n}());\r\nexport default Cookies;\r\n","import Cookies from './Cookies';\r\nexport default Cookies;\r\n","import React, {ReactNode, useEffect, useState} from \"react\";\r\nimport {Navigate, Outlet} from \"react-router-dom\";\r\nimport Cookies from \"universal-cookie\";\r\nimport axios from \"axios\";\r\nimport {authConfiguration} from \"../components/axiosConfigs/authConfiguration\";\r\n\r\nconst cookies = new Cookies();\r\n\r\n\r\ninterface Props {\r\n    children?: ReactNode\r\n}\r\n\r\n// receives component and any other props represented by ...rest\r\nexport default function ProtectedRoutes({children, ...rest}: Props) {\r\n\r\n    const [pageLoaded, setPageLoaded] = useState(false);\r\n    const [userLogged, setUserLogged] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        axios(authConfiguration())\r\n            .then((response) => {\r\n                setPageLoaded(true);\r\n                setUserLogged(true);\r\n            })\r\n            .catch((error) => {\r\n                setPageLoaded(true);\r\n                setUserLogged(false);\r\n            });\r\n\r\n    }, [])\r\n\r\n    let pageStatus;\r\n\r\n    if (pageLoaded)\r\n        pageStatus =\r\n            userLogged ? <Outlet/> : <Navigate to={'/login'}/>\r\n\r\n    return (\r\n        <div>{pageStatus}</div>\r\n    )\r\n};","/*!\n * cookie\n * Copyright(c) 2012-2014 Roman Shtylman\n * Copyright(c) 2015 Douglas Christopher Wilson\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module exports.\n * @public\n */\n\nexports.parse = parse;\nexports.serialize = serialize;\n\n/**\n * Module variables.\n * @private\n */\n\nvar decode = decodeURIComponent;\nvar encode = encodeURIComponent;\n\n/**\n * RegExp to match field-content in RFC 7230 sec 3.2\n *\n * field-content = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n * field-vchar   = VCHAR / obs-text\n * obs-text      = %x80-FF\n */\n\nvar fieldContentRegExp = /^[\\u0009\\u0020-\\u007e\\u0080-\\u00ff]+$/;\n\n/**\n * Parse a cookie header.\n *\n * Parse the given cookie header string into an object\n * The object has the various cookies as keys(names) => values\n *\n * @param {string} str\n * @param {object} [options]\n * @return {object}\n * @public\n */\n\nfunction parse(str, options) {\n  if (typeof str !== 'string') {\n    throw new TypeError('argument str must be a string');\n  }\n\n  var obj = {}\n  var opt = options || {};\n  var pairs = str.split(';')\n  var dec = opt.decode || decode;\n\n  for (var i = 0; i < pairs.length; i++) {\n    var pair = pairs[i];\n    var index = pair.indexOf('=')\n\n    // skip things that don't look like key=value\n    if (index < 0) {\n      continue;\n    }\n\n    var key = pair.substring(0, index).trim()\n\n    // only assign once\n    if (undefined == obj[key]) {\n      var val = pair.substring(index + 1, pair.length).trim()\n\n      // quoted values\n      if (val[0] === '\"') {\n        val = val.slice(1, -1)\n      }\n\n      obj[key] = tryDecode(val, dec);\n    }\n  }\n\n  return obj;\n}\n\n/**\n * Serialize data into a cookie header.\n *\n * Serialize the a name value pair into a cookie string suitable for\n * http headers. An optional options object specified cookie parameters.\n *\n * serialize('foo', 'bar', { httpOnly: true })\n *   => \"foo=bar; httpOnly\"\n *\n * @param {string} name\n * @param {string} val\n * @param {object} [options]\n * @return {string}\n * @public\n */\n\nfunction serialize(name, val, options) {\n  var opt = options || {};\n  var enc = opt.encode || encode;\n\n  if (typeof enc !== 'function') {\n    throw new TypeError('option encode is invalid');\n  }\n\n  if (!fieldContentRegExp.test(name)) {\n    throw new TypeError('argument name is invalid');\n  }\n\n  var value = enc(val);\n\n  if (value && !fieldContentRegExp.test(value)) {\n    throw new TypeError('argument val is invalid');\n  }\n\n  var str = name + '=' + value;\n\n  if (null != opt.maxAge) {\n    var maxAge = opt.maxAge - 0;\n\n    if (isNaN(maxAge) || !isFinite(maxAge)) {\n      throw new TypeError('option maxAge is invalid')\n    }\n\n    str += '; Max-Age=' + Math.floor(maxAge);\n  }\n\n  if (opt.domain) {\n    if (!fieldContentRegExp.test(opt.domain)) {\n      throw new TypeError('option domain is invalid');\n    }\n\n    str += '; Domain=' + opt.domain;\n  }\n\n  if (opt.path) {\n    if (!fieldContentRegExp.test(opt.path)) {\n      throw new TypeError('option path is invalid');\n    }\n\n    str += '; Path=' + opt.path;\n  }\n\n  if (opt.expires) {\n    if (typeof opt.expires.toUTCString !== 'function') {\n      throw new TypeError('option expires is invalid');\n    }\n\n    str += '; Expires=' + opt.expires.toUTCString();\n  }\n\n  if (opt.httpOnly) {\n    str += '; HttpOnly';\n  }\n\n  if (opt.secure) {\n    str += '; Secure';\n  }\n\n  if (opt.sameSite) {\n    var sameSite = typeof opt.sameSite === 'string'\n      ? opt.sameSite.toLowerCase() : opt.sameSite;\n\n    switch (sameSite) {\n      case true:\n        str += '; SameSite=Strict';\n        break;\n      case 'lax':\n        str += '; SameSite=Lax';\n        break;\n      case 'strict':\n        str += '; SameSite=Strict';\n        break;\n      case 'none':\n        str += '; SameSite=None';\n        break;\n      default:\n        throw new TypeError('option sameSite is invalid');\n    }\n  }\n\n  return str;\n}\n\n/**\n * Try decoding a string using a decoding function.\n *\n * @param {string} str\n * @param {function} decode\n * @private\n */\n\nfunction tryDecode(str, decode) {\n  try {\n    return decode(str);\n  } catch (e) {\n    return str;\n  }\n}\n"],"names":["readCookie","value","options","cleanValue","substr","cleanupCookieValue","doNotParse","isParsingCookie","JSON","parse","e","__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","this","Cookies","cookies","_this","changeListeners","HAS_DOCUMENT_COOKIE","cookie","parseCookies","Promise","document","catch","_updateBrowserValues","parseOptions","_emitChange","params","get","name","getAll","result","name_1","set","_a","stringify","remove","finalOptions","expires","Date","maxAge","undefined","addChangeListener","callback","push","removeChangeListener","idx","indexOf","splice","ProtectedRoutes","children","pageStatus","useState","pageLoaded","setPageLoaded","userLogged","setUserLogged","useEffect","axios","authConfiguration","then","response","error","to","exports","str","TypeError","obj","opt","pairs","split","dec","decode","pair","index","key","substring","trim","val","slice","tryDecode","enc","encode","fieldContentRegExp","test","isNaN","isFinite","Math","floor","domain","path","toUTCString","httpOnly","secure","sameSite","toLowerCase","decodeURIComponent","encodeURIComponent"],"sourceRoot":""}