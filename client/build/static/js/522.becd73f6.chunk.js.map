{"version":3,"file":"static/js/522.becd73f6.chunk.js","mappings":"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","sources":["components/axiosConfigs/loginConfiguration.ts","components/axiosConfigs/pageSetupConfiguration.ts","routes/routeComponents/Account/Login.tsx","routes/LoginPage.tsx","routes/routeComponents/Account/RegistrationFinish.tsx","routes/routeComponents/Page/PageSetup.tsx"],"sourcesContent":["export const loginConfiguration = <AxiosPageDataTypes>(email: AxiosPageDataTypes, password: AxiosPageDataTypes) => ({\r\n    method: \"post\",\r\n    url: \"https://avangardio-1.ru/account/login\",\r\n    withCredentials: true,\r\n    data: {\r\n        email,\r\n        password,\r\n    },\r\n});\r\n","export const pageSetupConfiguration = <AxiosPageDataTypes>(uId: AxiosPageDataTypes, data: AxiosPageDataTypes) => ({\r\n    method: \"post\",\r\n    url: \"https://avangardio-1.ru/page/pageSetup\",\r\n    withCredentials: true,\r\n    data: {\r\n        uId: uId,\r\n        pageData: data\r\n    }\r\n});\r\n","import React, {useState} from 'react';\r\nimport axios from \"axios\";\r\nimport allActions from '../../../redux/actions/userAction';\r\n\r\n\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {useNavigate} from \"react-router-dom\";\r\nimport {ReduxStoreType} from \"../../../redux/types/reduxStoreTypes\";\r\nimport RegistrationFinish from \"./RegistrationFinish\";\r\n\r\n\r\nconst {loginConfiguration} = require('../../../components/axiosConfigs/loginConfiguration');\r\n\r\nexport default function Login() {\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [loginResponse, setLoginResponse] = useState<string>();\r\n    const [nextStep, setNextStep] = useState<boolean>(false);\r\n    const [newId, setNewId] = useState<string>('');\r\n\r\n    const navigate = useNavigate();\r\n\r\n\r\n    const uId = useSelector((state: ReduxStoreType) => state.userState.uId);\r\n    const dispatch = useDispatch();\r\n\r\n    if (uId && window.location.pathname.toLowerCase() === '/login') navigate('/');\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n        // make the API call\r\n        axios(loginConfiguration(email, password))\r\n            .then((response) => {\r\n                if (!response.data.registrationCompleted) {\r\n                    setNewId(response.data.user);\r\n                    setNextStep(true);\r\n                    return;\r\n                }\r\n                dispatch(allActions.authUser(response.data.uId, response.data.registrationCompleted));\r\n                setLoginResponse('Login Success');\r\n                window.location.reload();\r\n            })\r\n            .catch((error) => {\r\n                console.log(error)\r\n                setLoginResponse(error.response.data.message);\r\n            });\r\n    };\r\n    if (nextStep) return (<RegistrationFinish userId={newId}/>);\r\n    return (\r\n        <div>\r\n            <form className={'LoginForm'} onSubmit={(e) => handleSubmit(e)}>\r\n                <input value={email} onChange={(e) => setEmail(e.target.value)} required={true} name=\"email\"\r\n                       placeholder={`Введите почту...`}/>\r\n                <input value={password} onChange={(e) => setPassword(e.target.value)} required={true} name='password'\r\n                       placeholder={`Введите пароль...`}/>\r\n                <button type={\"submit\"}>Войти</button>\r\n            </form>\r\n            {loginResponse}\r\n        </div>\r\n    )\r\n\r\n};","import React from \"react\";\r\nimport Login from './routeComponents/Account/Login';\r\n\r\n\r\nexport default function RegistrationPage() {\r\n    return (\r\n        <Login/>\r\n    )\r\n}","import React, {ReactElement} from 'react';\r\nimport PageSetup from \"../Page/PageSetup\";\r\n\r\nexport interface finishProps {\r\n    userId?: string\r\n}\r\n\r\nexport default function RegistrationFinish({userId}: finishProps): ReactElement {\r\n    return (<PageSetup userId={userId}></PageSetup>)\r\n}","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport {ReduxStoreType} from \"../../../redux/types/reduxStoreTypes\";\r\nimport {toast} from \"react-toastify\";\r\nimport {SocketIO} from \"../../../components/socket/socketIO\";\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n\r\nimport {Crop} from 'react-image-crop'\r\n\r\nconst socket = SocketIO.instance.socket;\r\n\r\nconst {pageSetupConfiguration} = require('../../../components/axiosConfigs/pageSetupConfiguration');\r\nconst {getPageConfiguration} = require('../../../components/axiosConfigs/getPageConfiguration');\r\n\r\n\r\nexport interface finishProps {\r\n    userId?: string\r\n}\r\n\r\nexport default function PageSetup({userId}: finishProps) {\r\n    //todo сделать верификацию изменения страницы чтоб мидлвэйром чекала айди пользователя и изменения!!!! отправляем uId свой чекаем с session userId и тогда пропускаем.\r\n    const uId = useSelector((state: ReduxStoreType) => state.userState.uId);\r\n\r\n    const [pageLoaded, setPageLoaded] = useState<boolean>(false);\r\n\r\n    const [pageExist, setPageExist] = useState<boolean>();\r\n\r\n    const [newPhoto, setNewPhoto] = useState<boolean>(false);\r\n\r\n    const [uploadedFile, setUploadedFile] = useState<string>('');\r\n    const [uploadedFileScale, setUploadedFileScale] = useState<{ width: number, height: number }>({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const [uploadedAvatar, setUploadedAvatar] = useState();\r\n    const [uploadedMiniAvatar, setUploadedMiniAvatar] = useState();\r\n\r\n    const [firstName, setFirstName] = useState<string>('');\r\n    const [lastName, setLastName] = useState<string>('');\r\n    const [city, setCity] = useState<string>('');\r\n    const [aboutMe, setAboutMe] = useState<string>('');\r\n    const [birthDay, setBirthDay] = useState<string>('');\r\n\r\n    const [response, setResponse] = useState<string>('');\r\n    const [crop, setCrop] = useState<Crop>({\r\n        unit: '%', // Can be 'px' or '%'\r\n        x: 25,\r\n        y: 25,\r\n        width: 50,\r\n        height: 50,\r\n    })\r\n\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        axios(pageSetupConfiguration(uId || userId, {\r\n            firstName,\r\n            lastName,\r\n            profilePhoto: uploadedFile,\r\n            uploadedAvatar,\r\n            uploadedMiniAvatar,\r\n            city,\r\n            aboutMe,\r\n            birthDay\r\n        }))\r\n            .then(result => {\r\n                setResponse(result.data.message === \"Page Update Success!\" ? \"Страница обновлена успешно\" : result.data.message)\r\n            })\r\n            .catch(error => {\r\n                if (error) console.log(error);\r\n            })\r\n\r\n    };\r\n\r\n    //  const {firstName, lastName, profilePhoto, city, aboutMe}\\\r\n    function uploadFile(event: ChangeEvent<HTMLInputElement>) {\r\n        const file = event.target.files![0];\r\n        if (file.size > 2097152 * 3) {\r\n            toast.error('Файл слишком большой!');\r\n            return;\r\n        }\r\n        socket.emit('UPLOAD_PHOTO', file, file.name);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!uId && !userId) return;\r\n        axios(getPageConfiguration(uId || userId))\r\n            .then(result => {\r\n                setPageLoaded(true);\r\n\r\n                setPageExist(true);\r\n                const page = result.data.page;\r\n                setFirstName(page ? page.firstName : '');\r\n                setLastName(page ? page.lastName : '');\r\n                setNewPhoto(false);\r\n                setUploadedFile(page ? page.profilePhoto : '');\r\n                setCity(page ? page.city : '');\r\n                setAboutMe(page ? page.aboutMe : '');\r\n                setBirthDay(page ? page.birthDay : '');\r\n\r\n            })\r\n            .catch(error => {\r\n                setPageLoaded(true)\r\n                if (error.response.status === 404) setPageExist(false);\r\n            })\r\n        socket.on('UPLOAD_PHOTO_ANSWER', function (file) {\r\n            const image = new Image();\r\n            image.src = file;\r\n            image.onload = () => {\r\n                setNewPhoto(true);\r\n                setUploadedFileScale({height: image.height, width: image.width});\r\n                setUploadedFile(file);\r\n            }\r\n\r\n        });\r\n        return (() => {\r\n            socket.off('UPLOAD_PHOTO_ANSWER');\r\n        });\r\n    }, [uId])\r\n\r\n    let pageSetupElements;\r\n\r\n    if (pageLoaded) {\r\n        pageSetupElements =\r\n            <div className='PageSetup'>\r\n\r\n                {pageExist ? <h1>Редактирование страницы</h1> : <h1>Создание страницы</h1>}\r\n                <div className='PageSetupForm'>\r\n\r\n                    <form onSubmit={(e) => handleSubmit(e)}>\r\n                        <div>\r\n                            <label htmlFor=\"firstName\"><b>Имя:</b></label>\r\n                            <input name='firstName' required={true} value={firstName}\r\n                                   onChange={(event) => setFirstName(event.target.value)} placeholder={'Ваше имя.'}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"lastName\"><b>Фамилия</b></label>\r\n                            <input name='lastName' required={true} value={lastName}\r\n                                   onChange={(event) => setLastName(event.target.value)} placeholder={'Ваша фамилия.'}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"age\"><b>Дата рождения:</b></label>\r\n                            <input name='age' value={birthDay} onChange={(event) => setBirthDay(event.target.value)}\r\n                                   type={\"date\"}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"city\"><b>Город:</b></label>\r\n                            <input name='city' value={city} onChange={(event) => setCity(event.target.value)}\r\n                                   placeholder={'Ваш город.'}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"aboutMe\"><b>О себе:</b></label>\r\n                            <textarea name='aboutMe' value={aboutMe}\r\n                                      onChange={(event) => setAboutMe(event.target.value)}\r\n                                      placeholder={'Расскажите о себе.'}/>\r\n                        </div>\r\n                        <div className=\"PageSetupAvatar\">\r\n                            <input type={'button'}\r\n                                   onClick={() => document.querySelector<HTMLElement>('#ChatImageLoad')!.click()}/>\r\n                            {uploadedFile ? <img className='UserPageImage' src={uploadedFile}/> : null}\r\n                            <input type='file' onChange={uploadFile} accept={'image/png, image/jpeg'}\r\n                                   id={'ChatImageLoad'}/>\r\n                        </div>\r\n                        <button type=\"submit\"><b>Внести изменения</b></button>\r\n                    </form>\r\n                </div>\r\n                <p>{response}</p>\r\n            </div>\r\n    }\r\n    return (\r\n        <div>{pageSetupElements}</div>\r\n    )\r\n}"],"names":["loginConfiguration","email","password","method","url","withCredentials","data","pageSetupConfiguration","uId","pageData","require","Login","useState","setEmail","setPassword","loginResponse","setLoginResponse","nextStep","setNextStep","newId","setNewId","navigate","useNavigate","useSelector","state","userState","dispatch","useDispatch","window","location","pathname","toLowerCase","RegistrationFinish","userId","className","onSubmit","e","preventDefault","axios","then","response","registrationCompleted","user","allActions","reload","catch","error","console","log","message","handleSubmit","value","onChange","target","required","name","placeholder","type","RegistrationPage","socket","SocketIO","getPageConfiguration","PageSetup","pageSetupElements","pageLoaded","setPageLoaded","pageExist","setPageExist","setNewPhoto","uploadedFile","setUploadedFile","width","height","setUploadedFileScale","uploadedAvatar","uploadedMiniAvatar","firstName","setFirstName","lastName","setLastName","city","setCity","aboutMe","setAboutMe","birthDay","setBirthDay","setResponse","unit","x","y","useEffect","result","page","profilePhoto","status","on","file","image","Image","src","onload","off","htmlFor","event","onClick","document","querySelector","click","files","size","toast","emit","accept","id"],"sourceRoot":""}