{"version":3,"file":"static/js/727.1aaa933c.chunk.js","mappings":"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","sources":["components/axiosConfigs/pageSetupConfiguration.ts","routes/routeComponents/Page/PageSetup.tsx"],"sourcesContent":["export const pageSetupConfiguration = <AxiosPageDataTypes>(uId: AxiosPageDataTypes, data: AxiosPageDataTypes) => ({\r\n    method: \"post\",\r\n    url: \"https://avangardio-1.ru/page/pageSetup\",\r\n    withCredentials: true,\r\n    data: {\r\n        uId: uId,\r\n        pageData: data\r\n    }\r\n});\r\n","import React, {ChangeEvent, useEffect, useState} from \"react\";\r\nimport {useSelector} from \"react-redux\";\r\nimport axios from \"axios\";\r\nimport {ReduxStoreType} from \"../../../redux/types/reduxStoreTypes\";\r\nimport {toast} from \"react-toastify\";\r\nimport {SocketIO} from \"../../../components/socket/socketIO\";\r\nimport 'react-image-crop/dist/ReactCrop.css'\r\n\r\nimport {Crop} from 'react-image-crop'\r\n\r\nconst socket = SocketIO.instance.socket;\r\n\r\nconst {pageSetupConfiguration} = require('../../../components/axiosConfigs/pageSetupConfiguration');\r\nconst {getPageConfiguration} = require('../../../components/axiosConfigs/getPageConfiguration');\r\n\r\n\r\nexport interface finishProps {\r\n    userId?: string\r\n}\r\n\r\nexport default function PageSetup({userId}: finishProps) {\r\n    //todo сделать верификацию изменения страницы чтоб мидлвэйром чекала айди пользователя и изменения!!!! отправляем uId свой чекаем с session userId и тогда пропускаем.\r\n    const uId = useSelector((state: ReduxStoreType) => state.userState.uId);\r\n\r\n    const [pageLoaded, setPageLoaded] = useState<boolean>(false);\r\n\r\n    const [pageExist, setPageExist] = useState<boolean>();\r\n\r\n    const [newPhoto, setNewPhoto] = useState<boolean>(false);\r\n\r\n    const [uploadedFile, setUploadedFile] = useState<string>('');\r\n    const [uploadedFileScale, setUploadedFileScale] = useState<{ width: number, height: number }>({\r\n        width: 0,\r\n        height: 0\r\n    });\r\n    const [uploadedAvatar, setUploadedAvatar] = useState();\r\n    const [uploadedMiniAvatar, setUploadedMiniAvatar] = useState();\r\n\r\n    const [firstName, setFirstName] = useState<string>('');\r\n    const [lastName, setLastName] = useState<string>('');\r\n    const [city, setCity] = useState<string>('');\r\n    const [aboutMe, setAboutMe] = useState<string>('');\r\n    const [birthDay, setBirthDay] = useState<string>('');\r\n\r\n    const [response, setResponse] = useState<string>('');\r\n    const [crop, setCrop] = useState<Crop>({\r\n        unit: '%', // Can be 'px' or '%'\r\n        x: 25,\r\n        y: 25,\r\n        width: 50,\r\n        height: 50,\r\n    })\r\n\r\n\r\n    const handleSubmit = (e: React.FormEvent<HTMLFormElement>) => {\r\n        e.preventDefault();\r\n\r\n        axios(pageSetupConfiguration(uId || userId, {\r\n            firstName,\r\n            lastName,\r\n            profilePhoto: uploadedFile,\r\n            uploadedAvatar,\r\n            uploadedMiniAvatar,\r\n            city,\r\n            aboutMe,\r\n            birthDay\r\n        }))\r\n            .then(result => {\r\n                setResponse(result.data.message === \"Page Update Success!\" ? \"Страница обновлена успешно\" : result.data.message)\r\n            })\r\n            .catch(error => {\r\n                if (error) console.log(error);\r\n            })\r\n\r\n    };\r\n\r\n    //  const {firstName, lastName, profilePhoto, city, aboutMe}\\\r\n    function uploadFile(event: ChangeEvent<HTMLInputElement>) {\r\n        const file = event.target.files![0];\r\n        if (file.size > 2097152 * 3) {\r\n            toast.error('Файл слишком большой!');\r\n            return;\r\n        }\r\n        socket.emit('UPLOAD_PHOTO', file, file.name);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!uId && !userId) return;\r\n        axios(getPageConfiguration(uId || userId))\r\n            .then(result => {\r\n                setPageLoaded(true);\r\n\r\n                setPageExist(true);\r\n                const page = result.data.page;\r\n                setFirstName(page ? page.firstName : '');\r\n                setLastName(page ? page.lastName : '');\r\n                setNewPhoto(false);\r\n                setUploadedFile(page ? page.profilePhoto : '');\r\n                setCity(page ? page.city : '');\r\n                setAboutMe(page ? page.aboutMe : '');\r\n                setBirthDay(page ? page.birthDay : '');\r\n\r\n            })\r\n            .catch(error => {\r\n                setPageLoaded(true)\r\n                if (error.response.status === 404) setPageExist(false);\r\n            })\r\n        socket.on('UPLOAD_PHOTO_ANSWER', function (file) {\r\n            const image = new Image();\r\n            image.src = file;\r\n            image.onload = () => {\r\n                setNewPhoto(true);\r\n                setUploadedFileScale({height: image.height, width: image.width});\r\n                setUploadedFile(file);\r\n            }\r\n\r\n        });\r\n        return (() => {\r\n            socket.off('UPLOAD_PHOTO_ANSWER');\r\n        });\r\n    }, [uId])\r\n\r\n    let pageSetupElements;\r\n\r\n    if (pageLoaded) {\r\n        pageSetupElements =\r\n            <div className='PageSetup'>\r\n\r\n                {pageExist ? <h1>Редактирование страницы</h1> : <h1>Создание страницы</h1>}\r\n                <div className='PageSetupForm'>\r\n\r\n                    <form onSubmit={(e) => handleSubmit(e)}>\r\n                        <div>\r\n                            <label htmlFor=\"firstName\"><b>Имя:</b></label>\r\n                            <input name='firstName' required={true} value={firstName}\r\n                                   onChange={(event) => setFirstName(event.target.value)} placeholder={'Ваше имя.'}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"lastName\"><b>Фамилия</b></label>\r\n                            <input name='lastName' required={true} value={lastName}\r\n                                   onChange={(event) => setLastName(event.target.value)} placeholder={'Ваша фамилия.'}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"age\"><b>Дата рождения:</b></label>\r\n                            <input name='age' value={birthDay} onChange={(event) => setBirthDay(event.target.value)}\r\n                                   type={\"date\"}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"city\"><b>Город:</b></label>\r\n                            <input name='city' value={city} onChange={(event) => setCity(event.target.value)}\r\n                                   placeholder={'Ваш город.'}/>\r\n                        </div>\r\n                        <div>\r\n                            <label htmlFor=\"aboutMe\"><b>О себе:</b></label>\r\n                            <textarea name='aboutMe' value={aboutMe}\r\n                                      onChange={(event) => setAboutMe(event.target.value)}\r\n                                      placeholder={'Расскажите о себе.'}/>\r\n                        </div>\r\n                        <div className=\"PageSetupAvatar\">\r\n                            <input type={'button'}\r\n                                   onClick={() => document.querySelector<HTMLElement>('#ChatImageLoad')!.click()}/>\r\n                            {uploadedFile ? <img className='UserPageImage' src={uploadedFile}/> : null}\r\n                            <input type='file' onChange={uploadFile} accept={'image/png, image/jpeg'}\r\n                                   id={'ChatImageLoad'}/>\r\n                        </div>\r\n                        <button type=\"submit\"><b>Внести изменения</b></button>\r\n                    </form>\r\n                </div>\r\n                <p>{response}</p>\r\n            </div>\r\n    }\r\n    return (\r\n        <div>{pageSetupElements}</div>\r\n    )\r\n}"],"names":["pageSetupConfiguration","uId","data","method","url","withCredentials","pageData","socket","SocketIO","require","getPageConfiguration","PageSetup","pageSetupElements","userId","useSelector","state","userState","useState","pageLoaded","setPageLoaded","pageExist","setPageExist","setNewPhoto","uploadedFile","setUploadedFile","width","height","setUploadedFileScale","uploadedAvatar","uploadedMiniAvatar","firstName","setFirstName","lastName","setLastName","city","setCity","aboutMe","setAboutMe","birthDay","setBirthDay","response","setResponse","unit","x","y","useEffect","axios","then","result","page","profilePhoto","catch","error","status","on","file","image","Image","src","onload","off","className","onSubmit","e","preventDefault","message","console","log","handleSubmit","htmlFor","name","required","value","onChange","event","target","placeholder","type","onClick","document","querySelector","click","files","size","toast","emit","accept","id"],"sourceRoot":""}